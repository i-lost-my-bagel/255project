
import java.util.Random;
import java.util.Scanner;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author lily
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CharacterNamingDialog = new javax.swing.JDialog();
        MageLabel = new javax.swing.JLabel();
        BerserkerLabel = new javax.swing.JLabel();
        HealerLabel = new javax.swing.JLabel();
        GuardianLabel = new javax.swing.JLabel();
        MageNameField = new javax.swing.JTextField();
        BerserkerNameField = new javax.swing.JTextField();
        GuardianNameField = new javax.swing.JTextField();
        HealerNameField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        AboutButton = new javax.swing.JMenuItem();

        MageLabel.setText("Mage");

        BerserkerLabel.setText("Berserker");

        HealerLabel.setText("Healer");

        GuardianLabel.setText("Guardian");

        MageNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MageNameFieldActionPerformed(evt);
            }
        });

        GuardianNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardianNameFieldActionPerformed(evt);
            }
        });

        jButton1.setText("Set Names");

        javax.swing.GroupLayout CharacterNamingDialogLayout = new javax.swing.GroupLayout(CharacterNamingDialog.getContentPane());
        CharacterNamingDialog.getContentPane().setLayout(CharacterNamingDialogLayout);
        CharacterNamingDialogLayout.setHorizontalGroup(
            CharacterNamingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CharacterNamingDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CharacterNamingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, CharacterNamingDialogLayout.createSequentialGroup()
                        .addComponent(MageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MageNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, CharacterNamingDialogLayout.createSequentialGroup()
                        .addComponent(BerserkerLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addComponent(BerserkerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CharacterNamingDialogLayout.createSequentialGroup()
                        .addGroup(CharacterNamingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GuardianLabel)
                            .addComponent(HealerLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(CharacterNamingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(HealerNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(GuardianNameField))))
                .addContainerGap())
        );
        CharacterNamingDialogLayout.setVerticalGroup(
            CharacterNamingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CharacterNamingDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CharacterNamingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MageLabel)
                    .addComponent(MageNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CharacterNamingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BerserkerLabel)
                    .addComponent(BerserkerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CharacterNamingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GuardianNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GuardianLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CharacterNamingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HealerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HealerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("jButton2");

        jButton3.setText("jButton3");

        jButton4.setText("jButton4");

        jButton5.setText("jButton5");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        AboutButton.setText("About");
        AboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutButtonActionPerformed(evt);
            }
        });
        jMenu2.add(AboutButton);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(33, 33, 33)
                        .addComponent(jButton3)
                        .addGap(44, 44, 44)
                        .addComponent(jButton4)
                        .addGap(41, 41, 41)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void AboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AboutButtonActionPerformed

    private void GuardianNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardianNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GuardianNameFieldActionPerformed

    private void MageNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MageNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MageNameFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
        
        
    
    // Create initial characters with placeholder names
    Guardian guardian = new Guardian("Guardian", true, 0, 100, 200, 0, false);
    Berserker berserker = new Berserker("Berserker", true, 0, 100, 100, 0, false);
    Healer healer = new Healer("Healer", true, 0, 100, 100, 0, false);
    Mage mage = new Mage("Mage", true, 0, 100, 100, 0, false);
    
    Boss boss = new Boss("Boss", true, 500, 1);
    
    //inits
        Boolean play = true;
        Boolean stun = false;
        int Stuns = 0;
        int healedPlayers = 0;
        int shieldedPlayers = 0;
    
    while (play){ //while playing game is true
        for (int day = 1; day <=3; day++){ //for each day
            switch(day){ //boss' health increase each day
                case 1:
                    break;
                case 2:
                   boss.setHealth(boss.getHealth() + 100);
                   break;
                case 3:
                   boss.setHealth(boss.getHealth() + 100);
                   break;
            }
            for(int moves = 0; moves <=2; moves++ ){ //for each move [NOTE!!!!!!] I believe we should implement a while loop along the lines of while boss health > 0, instead of having a maximum number of moves since it may take more than two moves and players will win as soon as the boss dies instead of potentially a turn after
                Random rand = new Random();
                int min = 1;
                int max = 4;
                int randomNumber = rand.nextInt(max - min) + min;
               
                System.out.println("\nDAY" + day); //print day num + who is being played
                if(randomNumber == 1){
                    System.out.println("Guardian is Being Played");
                }
                if(randomNumber == 2){
                    System.out.println("Berserker is Being Played");
                }
                if(randomNumber == 3){
                    System.out.println("Healer is Being Played");
                }
                if(randomNumber == 4){
                    System.out.println("Mage is Being Played");
                }
              
                //choose action
                System.out.println("Choose Player Action");
                System.out.println("1. Do Damage");
                System.out.println("2. Special Ability");
                System.out.println("3. Eat Food");
                System.out.println("4. Quit Game");
               
                System.out.print("Action Number: ");
                Scanner scan = new Scanner(System.in);
                String askPlayer = scan.nextLine();
               
                switch (Integer.parseInt(askPlayer)) {
                    case 1: //do damage
                        switch (randomNumber) {
                            case 1:
                               boss.setHealth(boss.getHealth() - 50);
                               guardian.setDamage(guardian.getDamage()+50);
                               break;
                            case 2:
                               boss.setHealth(boss.getHealth() - 50);
                               berserker.setDamage(berserker.getDamage()+50);
                               break;
                            case 3:
                               boss.setHealth(boss.getHealth() - 20);
                               healer.setDamage(healer.getDamage()+20);
                               break;
                            case 4:
                               boss.setHealth(boss.getHealth() - 30);
                               mage.setDamage(mage.getDamage()+30);
                               break;
                            default:
                               break;
                        }
                    case 2: //special ability
                        switch (randomNumber) {
                            case 1: //guardian
                                if (guardian.getMana()==100){
                                System.out.println("Choose player to shield for 1 turn: ");
                                switch (Integer.parseInt(askPlayer)){
                                    case 1:
                                       guardian.setShielded(true);
                                       System.out.println("Guardian is Shielded!");
                                       break;
                                    case 2:
                                       berserker.setShielded(true);
                                       System.out.println("Berserker is Shielded!");
                                       break;
                                    case 3:
                                       healer.setShielded(true);
                                       System.out.println("Healer is Shielded!");
                                       break;
                                    case 4:
                                       mage.setShielded(true);
                                       System.out.println("Mage is Shielded!");
                                       break;
                                    default:
                                       System.out.println("Invalid Player Selection!");  
                                       break;
                                    }
                                shieldedPlayers++;
                                guardian.setMana(0);
                                }
                                else {
                                    System.out.println("Not enough mana!");
                                }
                                break;
                            case 2: //Beserker
                                if (berserker.getMana()==100){
                                boss.setHealth(boss.getHealth() - 100);
                                berserker.setDamage(berserker.getDamage()+100);
                                berserker.setMana(0);
                                }
                                else {
                                    System.out.println("Not enough mana!");
                                }
                                break;
                            case 3: //Healer
                                if (healer.getMana()==100){
                                    System.out.println("Choose player to heal: ");
                                    switch (Integer.parseInt(askPlayer)){
                                        case 1:
                                            guardian.setHealth(guardian.getHealth()+15);
                                            break;
                                    case 2:
                                        berserker.setHealth(berserker.getHealth()+15);
                                        break;
                                    case 3:
                                        healer.setHealth(healer.getHealth()+15);
                                        break;
                                    case 4:
                                        mage.setHealth(mage.getHealth()+15);
                                        break;
                                    default:
                                        System.out.println("Invalid Player Selection!"); 
                                        break;
                                }
                                healedPlayers++;
                                healer.setMana(0);
                                }
                                else {
                                    System.out.println("Not enough mana!");
                                }
                                break;
                            case 4: //Mage
                                if (mage.getMana()==100){
                                    stun = true;
                                    Stuns++;
                                    System.out.println("Boss is stunned for 1 turn!");
                                    mage.setMana(0);
                                }
                                else {
                                    System.out.println("Not enough mana!");
                                }
                                break;
                            default:
                                break;
                    
                        }
                        break;
                    case 3: //eat food
                        switch (randomNumber) {
                            case 1:
                                guardian.setHealth(guardian.getHealth()+10);
                                break;
                            case 2:
                                berserker.setHealth(berserker.getHealth()+10);
                                break;
                            case 3:
                                healer.setHealth(healer.getHealth()+10);
                                break;
                            case 4:
                                mage.setHealth(mage.getHealth()+10);
                                break;
                            default:
                                break;
                        }
                        break;
                    case 4: //quit game
                        System. exit(0);
                        break;
                    default:
                        System.out.println("Invalid Action! Game will show end of Day 1 statistics and begin again.");
                        day = 1;
                        moves = 0;
                        break;
                } //end of moves
                if(boss.getHealth() <= 0){
                    System.out.println("You win!");
                    day = 1;
                }
               
            }
       //end of day stats
        System.out.println("\nEnd of Day " + day + " Statistics:");
        System.out.println("Guardian Stats");
        System.out.println("Name: " + guardian.getName());
        System.out.println("Health: " + guardian.getHealth());
        System.out.println("Damage Dealt: " + guardian.getDamage());
        System.out.println("Players Shielded: " + shieldedPlayers);
 
        System.out.println("\nBerserker Stats");
        System.out.println("Name: " + berserker.getName());
        System.out.println("Health: " + berserker.getHealth());
        System.out.println("Damage Dealt: " + berserker.getDamage());
 
        System.out.println("\nHealer Stats");
        System.out.println("Name: " + healer.getName());
        System.out.println("Health: " + healer.getHealth());
        System.out.println("Damage Dealt: " + healer.getDamage());
        System.out.println("Players Healed: " + healedPlayers);
 
        System.out.println("\nMage Stats");
        System.out.println("Name: " + mage.getName());
        System.out.println("Health: " + mage.getHealth());
        System.out.println("Damage Dealt: " + mage.getDamage());
        System.out.println("Stuns: " + Stuns);     
        }
       
    }
    
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutButton;
    private javax.swing.JLabel BerserkerLabel;
    private javax.swing.JTextField BerserkerNameField;
    private javax.swing.JDialog CharacterNamingDialog;
    private javax.swing.JLabel GuardianLabel;
    private javax.swing.JTextField GuardianNameField;
    private javax.swing.JLabel HealerLabel;
    private javax.swing.JTextField HealerNameField;
    private javax.swing.JLabel MageLabel;
    private javax.swing.JTextField MageNameField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
